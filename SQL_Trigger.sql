--Write a trigger named A9Trigger that will adjust the quantity on hand value for products if line quantity of an order 
--in order line gets changed as a result of update, delete, or insert. You must consider all possible cases. 
--You will turn in the code for the trigger and the code you use to test the trigger. Named the file A9.sql. 
--Please note you turn in the assignment both in print and on Blackboard. You will use the same database as in Assignment 7.
--  I strongly encourage you to write the trigger from scratch rather than modifying the example from class
CREATE TRIGGER UPDATE_PRODUCT_QUANTITY_ON_HAND--Command(s) completed successfully.
ON LGLINE
AFTER INSERT, DELETE, UPDATE
AS
BEGIN
	DECLARE @PROD_SKU NVARCHAR(15)
	DECLARE @TOTAL INT

	IF (EXISTS (SELECT * FROM INSERTED))
	BEGIN
		DECLARE INSERTED_CURSOR CURSOR FOR
		SELECT PROD_SKU, SUM(LINE_QTY) AS TOTAL
		FROM inserted
		GROUP BY PROD_SKU

		OPEN INSERTED_CURSOR
		FETCH NEXT FROM INSERTED_CURSOR
				   INTO @PROD_SKU, @TOTAL
		WHILE (@@FETCH_STATUS = 0)
			BEGIN
				UPDATE LGPRODUCT
				SET PROD_QOH = PROD_QOH - @TOTAL--PRODUCTS ON HAND WILL BE DCREASED BY THE NUMBER OF PRODUCTS ORDERED: TOTAL
				WHERE PROD_SKU = @PROD_SKU
				FETCH NEXT FROM INSERTED_CURSOR
						   INTO @PROD_SKU, @TOTAL
			END
		CLOSE INSERTED_CURSOR
		DEALLOCATE INSERTED_CURSOR
	END

	IF(EXISTS (SELECT* FROM deleted))
	BEGIN
		
		DECLARE DELETED_CURSOR CURSOR FOR
		SELECT PROD_SKU, SUM(LINE_QTY) AS TOTAL
		FROM deleted
		GROUP BY PROD_SKU


		OPEN DELETED_CURSOR
		FETCH NEXT FROM DELETED_CURSOR
				   INTO @PROD_SKU, @TOTAL
		WHILE (@@FETCH_STATUS = 0)
			BEGIN
				UPDATE LGPRODUCT
				SET PROD_QOH = PROD_QOH + @TOTAL--I.E, WHEN CUSTOMER BRINGS ITEM BACK, INVENTORY INCREASES OR FOR WHEN A DELETE STATEMENT 
				WHERE PROD_SKU = @PROD_SKU
				FETCH NEXT FROM DELETED_CURSOR
						   INTO @PROD_SKU, @TOTAL
			END
		CLOSE DELETED_CURSOR
		DEALLOCATE DELETED_CURSOR
	END	
END
GO


---BEGINNING OF TEST CODE
SELECT *--IN LGLINE
FROM LGLINE
WHERE PROD_SKU = '6041-PBS' AND LINE_NUM = 4


SELECT*--IN LGPRODUCT TO CHECK PROD_QOH
FROM LGPRODUCT
WHERE PROD_SKU LIKE '6041-PBS'


UPDATE LGLINE--10 MORE ITEMS ARE ORDERED TO LINE_QTY, MEANING 10 ITEMS WILL COME OUT OF PROD_QOH FOR 3 RECORDS
SET LINE_QTY = LINE_QTY + 10
WHERE PROD_SKU ='6041-PBS' AND LINE_NUM = 4

UPDATE LGLINE--10 ORDERS COMING BACK TO INVENTORY. CUSTOMER DIDN'T LIKE IT. AFFECTS 3 RECORDS
SET LINE_QTY = LINE_QTY - 10
WHERE PROD_SKU = '6041-PBS' AND LINE_NUM = 4


--When he asks for all possible cases, he wants to to add an orderline: DONE, update an orderline (meaning update number ordered): DONE, 
--and delete an order line: DONE. 
--He also wants you to have a test that affects multiple records in the order line: DONE.
-- You should have at least four test cases.


--DELETE RECORD: (104,2,'8523-UCB',1,21.59) FROM LGLINE. PROD_SKU INCREASES TO 140
DELETE
FROM LGLINE
WHERE INV_NUM = 104 AND
LINE_NUM = 2


--SEE LGPRODUCT TABLE TO SEE IF PROD_SKU 8523-UCB, PROD_QOH CHANGED TO 140 UNITS
SELECT*
FROM LGPRODUCT
WHERE PROD_SKU = '8523-UCB'



--ADD BACK THE RECORD SO THAT LGLINE HAS A NEW ORDER LINE AND LGPRODUCT FOR PROD_SKU: '8523-UCB'GOES BACK TO 139 UNITS 
INSERT INTO LGLINE
VALUES (104,2,'8523-UCB',1,21.59)
--END OF TEST CODE



